apiVersion: v1
kind: Namespace
metadata:
  name: porter-system
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: bgpconfs.network.kubesphere.io
spec:
  group: network.kubesphere.io
  names:
    kind: BgpConf
    listKind: BgpConfList
    plural: bgpconfs
    singular: bgpconf
  scope: Cluster
  validation:
    openAPIV3Schema:
      description: BgpConf is the Schema for the bgpconfs API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: struct for container bgp:config. Configuration parameters relating
            to the global BGP router.
          properties:
            as:
              description: original -> bgp:as bgp:as's original type is inet:as-number.
                Local autonomous system number of the router.  Uses the 32-bit as-number
                type from the model in RFC 6991.
              format: int32
              type: integer
            port:
              description: original -> gobgp:port
              format: int32
              maximum: 65535
              minimum: 1
              type: integer
            routerID:
              description: original -> bgp:router-id bgp:router-id's original type
                is inet:ipv4-address. Router id of the router, expressed as an 32-bit
                value, IPv4 address.
              pattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}$
              type: string
          required:
          - as
          - port
          - routerID
          type: object
        status:
          description: BgpConfStatus defines the observed state of BgpConf
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: bgppeers.network.kubesphere.io
spec:
  group: network.kubesphere.io
  names:
    kind: BgpPeer
    listKind: BgpPeerList
    plural: bgppeers
    singular: bgppeer
  scope: Cluster
  validation:
    openAPIV3Schema:
      description: BgpPeer is the Schema for the bgppeers API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            addPaths:
              description: original -> bgp:add-paths Parameters relating to the advertisement
                and receipt of multiple paths for a single NLRI (add-paths).
              properties:
                sendMax:
                  description: original -> bgp:send-max The maximum number of paths
                    to advertise to neighbors for a single NLRI.
                  type: integer
              type: object
            config:
              description: original -> bgp:neighbor-address original -> bgp:neighbor-config
                Configuration parameters relating to the BGP neighbor or group.
              properties:
                neighborAddress:
                  description: original -> bgp:neighbor-address bgp:neighbor-address's
                    original type is inet:ip-address. Address of the BGP peer, either
                    in IPv4 or IPv6.
                  pattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}$
                  type: string
                peerAs:
                  description: original -> bgp:peer-as bgp:peer-as's original type
                    is inet:as-number. AS number of the peer.
                  format: int32
                  type: integer
              required:
              - neighborAddress
              - peerAs
              type: object
            transport:
              description: original -> bgp:transport Transport session parameters
                for the BGP neighbor or group.
              properties:
                passiveMode:
                  description: original -> bgp:passive-mode bgp:passive-mode's original
                    type is boolean. Wait for peers to issue requests to open a BGP
                    session, rather than initiating sessions from the local router.
                  type: boolean
                remotePort:
                  description: original -> gobgp:remote-port gobgp:remote-port's original
                    type is inet:port-number.
                  maximum: 65535
                  minimum: 1
                  type: integer
              type: object
            usingPortForward:
              type: boolean
          type: object
        status:
          description: BgpPeerStatus defines the observed state of BgpPeer
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: eips.network.kubesphere.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.address
    name: cidr
    type: string
  - JSONPath: .status.usage
    name: usage
    type: integer
  - JSONPath: .status.poolSize
    name: total
    type: integer
  group: network.kubesphere.io
  names:
    categories:
    - ksnet
    kind: Eip
    listKind: EipList
    plural: eips
    singular: eip
  scope: Cluster
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Eip is the Schema for the eips API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: EipSpec defines the desired state of EIP
          properties:
            address:
              pattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}((\/([0-9]|[1-2][0-9]|3[0-2]))|(\-([0-9]{1,3}\.){3}[0-9]{1,3}))?$
              type: string
            disable:
              type: boolean
            protocol:
              enum:
              - bgp
              - layer2
              type: string
            usingKnownIPs:
              type: boolean
          required:
          - address
          type: object
        status:
          description: EipStatus defines the observed state of EIP
          properties:
            occupied:
              type: boolean
            poolSize:
              type: integer
            usage:
              type: integer
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: leader-election-role
  namespace: porter-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: manager-role
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - network.kubesphere.io
  resources:
  - bgpconfs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network.kubesphere.io
  resources:
  - bgpconfs/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - network.kubesphere.io
  resources:
  - bgppeers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network.kubesphere.io
  resources:
  - bgppeers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - network.kubesphere.io
  resources:
  - eips
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network.kubesphere.io
  resources:
  - eips/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: leader-election-rolebinding
  namespace: porter-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-election-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: porter-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: porter-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: porter-manager
    control-plane: porter-manager
  name: porter-manager
  namespace: porter-system
spec:
  selector:
    matchLabels:
      app: porter-manager
      control-plane: porter-manager
  template:
    metadata:
      labels:
        app: porter-manager
        control-plane: porter-manager
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - porter-manager
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - /manager
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: kubespheredev/porter:v0.3-dev
        imagePullPolicy: IfNotPresent
        name: manager
        readinessProbe:
          httpGet:
            path: /hello
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 3
        resources:
          limits:
            cpu: 100m
            memory: 30Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_TIME
      hostNetwork: true
      terminationGracePeriodSeconds: 10
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    control-plane: porter-agent
    controller-tools.k8s.io: "1.0"
  name: porter-agent
  namespace: porter-system
spec:
  selector:
    matchLabels:
      app: porter-agent
  template:
    metadata:
      labels:
        app: porter-agent
    spec:
      containers:
      - env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: MY_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        image: kubespheredev/porter-agent:v0.3-dev
        imagePullPolicy: IfNotPresent
        name: porter-agent
        resources:
          limits:
            cpu: 100m
            memory: 30Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
      hostNetwork: true
